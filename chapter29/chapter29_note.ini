P710 运算符重载只是意味着在类方法中拦截内置的操作——当类的实例出现在内置操作中，python自动调用你的方法，并且你的方法的返回值变成了相应操作的结果。
     运算符重载让类拦截常规的python运算。
     类可重载所有python表达式运算符。
     类也可以重载答应，函数调用，属性点号运算等内置运算。
     重载使类实例的行为像内置类型。
     重载是通过提供特殊名称的类方法来实现的。
P711 常见的运算符重载方法：
     方法                   重载                    调用
     __init__               构造函数                对象建立：X = Class(args)
     __del__                析构函数                X对象收回
     __add__                运算符+                 如果没有__iadd__,X+Y,X+=Y
     __or__                 运算符|（位OR）         如果没有__ior__,X|Y,X|=Y
     __repr__,__str__       打印，转换              print(X),repr(X),str(X)
     __call__               函数调用                X(*args,**kargs)
     __getattr__            点号运算                X.undefined
     __setattr__            属性赋值语句            X.any=value
     __delattr__            属性删除                del X.any
     __getattribute__       属性获取                X.any
     __getitem__            索引运算                X[key],X[i:j]，没有__iter__时的for循环和其他迭代器
     __setitem__            索引赋值语句            X[key]=value,X[i:j]=sequence
     __delitem__            索引和分片删除          del X[key],del X[i:j]
     __len__                长度                    len(X)，如果没有__bool__，真值测试
     __bool__               布尔测试                bool(X)，真测试(在python2.6中叫做__nonzero__)
     __lt__,__gt__,         特定的比较              X<Y,X>Y,X<=Y,X>=Y,
     __le__,__ne__,                                 X==Y,X!=Y（或者在python2.6
     __eq__,__ne__                                  中只有__cmp__）
     __radd__               右侧加法                Other+X
     __radd__               实地（增强的）加法      X+=Y(or else __add__)
     __iter__,__next__      迭代环境                I=iter(X),next(I);for loops,in if no __contains__,all comrehensions,map(F,X)
     __contains__           成员关系测试            item in X（任何可迭代的）
     __index__              整数值                  hex(X),bin(X),oct(X),O[X],O[X:]（替代python2中的__oct__,__hex__）
     __enter__,__exit__     环境管理器              with obj as var:
     __get__,__set__,       属性符属性              X.attr,X.attr=value,del X.attr
     __delte__
     __new__                创建                    在__init__之前创建对象
P716 __getitem__也可以是一种重载迭代的方式。如果定义了这个方法，for循环每次循环都会调用类的__getitem__，并持续搭配有更高的偏移值。
P717 python中所有的迭代环境都会先尝试__iter__方法，再尝试__getitem__。也就是说，宁愿使用迭代协议，然后才是重复对对象进行索引运算。
     从技术的角度讲，迭代环境是通过调用内置函数iter去尝试寻找__iter__方法来实现的，而这种方法应该返回一个迭代器对象。如果已经提供了，python就会重复调动这个迭代器对象的next方法，直到发生StopIteration异常。如果没有找到这类__iter__方法，python会改用__getitem__机制，就像之前那样通过偏移量重复索引，直到引发IndexError异常。
P722 __contains__方法优先于__iter__方法。
P724 __setattr__方法会拦截所有属性的赋值语句。如果定义了这个方法，self.attr=value会变成self.__setattr__('attr',value)。这一点技巧很高，因为在__setattr__中对任何self属性做赋值，都会再次调用__setattr__方法，导致了无穷递归循环（最后就是堆栈溢出异常）。如果想使用这个方法，要确定是通过对属性字典做索引运算来赋值任何实例属性的。也就是说，是使用self.__dict__['name']=x，而不是self.name=x。
P725 __getattr__方法是拦截属性点号运算。更确切地说，当通过对未定义（不存在）属性名称和实例进行点号运算时，就会用属性名称作为字符串调用这个方法。如果python可以通过其继承树搜索流程找到这个属性，该方法就不会被调用。
     __getattribute__方法拦截所有的属性获取，而不只是哪些未定义的。
P727 打印操作会首先尝试__str__和str内置函数（print运行的内部等价形式）。它通常应该返回一个用户友好的显示。
     __repr__用于所有其他的环境中：用于交互模式下提示回应以及repr函数，如果没有使用__str__，print和str也会使用。它通常返回一个编码字符串，可以用来重新创建对象，或者给开发者一个详细的显示。
P739 哪两种运算符重载方法可以用来支持类中的迭代？
     类可以通过定义（或继承）__getitem__或__iter__来支持迭代。在所有的迭代环境中，python首先尝试使用__iter__（它返回支持迭代协议的一个对象，该对象带有一个__next__方法）：如果在继承搜索中没有找到__iter__，python退而求其次地使用__getitem__索引方法。
