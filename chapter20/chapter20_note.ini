P495 >>>res = []
     >>>for X in 'spam':
     ...    res.append(ord(x))

     >>>res=list(map(ord,'spam'))

     >>>res=[ ord(x) for x in 'spam']

     列表解析在一个序列的值上应用一个任意表达式，将其结果收集到一个新的列表中并返回。从语法上讲，列表解析是由方括号封装起来的。

P499 map调用比等效的for循环要快两倍，而列表解析往往比map调用要稍快一些。速度上的差距是来自于底层实现上，map和列表解析是在解释器中以C语言的速度来运行，比Python的for循环代码的PVM中步进运行要快得多。

P501 生成器函数：编写为常规的def语句，但是使用yield语句一次返回一个结果，在每个结果之间挂起和继续它们的状态。
     生成器表达式：类似于列表解析，它们返回按需产生结果的一个对象，而不是构建一个结果列表。

P503 生成器函数应用：
     yield函数得到一个生成器对象，它支持迭代器协议，也就是说，生成器对象有一个__next__方法，它可以开始这个函数，或者从它上次yield值后的地方恢复，并且在得到一系列的值的最后一个时，产生StopIteration异常。为了方便起见，next(X)内置函数为我们调用一个对象的X.__next__()方法。

P504 生成器函数协议send方法，生成一系列结果的下一个元素。值可以通过调用G.send(value)发送给一个生成器。

P506 生成器表达式：从语法上讲，生成器表达式就像一般的列表解析一样，但是它们是括在圆括号中而不是在方括号中。

P508 生成器是单迭代器对象。一个生成器的迭代器是生成器本身，iter(G) is G(True)。

P516 Python3.0解析语法概况
     []列表解析，()生成器表达式，{}集合解析，{:}字典解析

P531 没有return语句的函数，将自动返回None对象。

P532 列表解析放在方括号和圆括号中有什么区别？
     方括号中的列表解析会一次在内存中产生结果列表，位于圆括号中，实际是生成器表达式。生成器表达式会返回一个生成器对象，用在迭代环境中，一次产生结果中的一个元素。

P532 yield语句是做什么的？
     生成器函数包含yield语句。当yield语句运行时，会把结果返回给调用者，让函数的状态挂起。然后，当调用者再调用__next__方法时，这个函数就可以重新在上次yield语句后继续运行。生成器也可以有return语句，用来终止生成器。

P535 math.sqrt(x),x**0.5,pow(x,0.5)
#coding=utf-8
import sys,time
import math

reps1=1000
repslist1=range(reps1)
reps2=10000
repslist2=range(reps2)

def timer(func,*pargs,**kargs):
    start=time.clock()
    for i in repslist1:
        ret=func(*pargs,**kargs)
    elapsed=time.clock()-start
    return (elapsed,ret)

def fun1():
    for i in repslist2:
        res = math.sqrt(i)
    return res

def fun2():
    for i in repslist2:
        res = i**0.5
    return res

def fun3():
    for i in repslist2:
        res = pow(i,0.5)
    return res

print(sys.version)
for test in (fun1,fun2,fun3):
    elapsed,result=timer(test)
    print('-'*33)
    print("%-9s:%.5f=>[%s]"%(test.__name__,elapsed,result))

3.5.3 (default, Sep 27 2018, 17:25:39) 
[GCC 6.3.0 20170516]
---------------------------------
fun1     :5.16592=>[99.99499987499375]
---------------------------------
fun2     :4.82897=>[99.99499987499375]
---------------------------------
fun3     :6.33537=>[99.99499987499375]
