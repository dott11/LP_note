P939 __getattr__和__setattr__方法，把未定义的属性获取和所有的属性赋值指向通用的处理器方法。
     __getattribute__方法，把所有属性获取都指向Python 2.6的新式类和Python 3.0的所有类中的一个泛型处理器方法。
     property内置函数，把特定属性访问定位到get和set处理器函数，也叫做特性（Property）。
     描述符协议，把特定属性访问定位到具有任意get和set处理器方法的类的实例。
P944 描述符提供了拦截属性访问的一种替代方法。实际上，特性是描述符的一种——从技术上讲，property内置函数只是创建一个特定类型的描述符的一种简化方式，而这种描述符在属性访问时运行方法函数。
     class Descriptor:
        "docstring goes here"
        def __get__(self, instance, owner): ... # Return attr value
        def __set__(self, instance, value): ... # Return nothing (None)
        def __delete__(self, instance): ... # Return nothing (None)
     所有3种描述符方法，都传递了描述符类实例（self）以及描述符实例所附加的客户类的实例（instance）。__get__访问方法还额外地接收一个owner参数，指定了描述符实例要附加到的类。
#coding=utf-8

class Descriptor(object):
    def __get__(self, instance, owner):
        print(self, instance, owner, sep='\n')

class Subject:
    attr = Descriptor()         # Descriptor instance is class attr

x = Subject()
print('~'*20)
x.attr
print('~'*20)
Subject.attr

~~~~~~~~~~~~~~~~~~~~
<__main__.Descriptor object at 0x7fa528cb4898>
<__main__.Subject object at 0x7fa528cb48d0>
<class '__main__.Subject'>
~~~~~~~~~~~~~~~~~~~~
<__main__.Descriptor object at 0x7fa528cb4898>
None
<class '__main__.Subject'>
P955 由于__getattr__仅针对未定义的属性调用，所以它可以在自己的代码中自由地获取其他属性。然而，由于__getattribute__和__setattr__针对所有的属性运行，因此，它们的代码要注意在访问其他属性的时候避免再次调用自己并触发一次递归循环。
     例如，在一个__getattribute__方法代码内部的另一次属性获取，将会再次触发 __getattribute__，并且代码将会循环直到内存耗尽：
     def __getattribute__(self, name):
        x = self.other # LOOPS!
     要解决这个问题，把获取指向一个更高的超类，而不是跳过这个层级的版本——object类总是一个超类，并且它在这里可以很好地起作用：
     def __getattribute__(self, name):
        x = object.__getattribute__(self, 'other') # Force higher to avoid me
     对于__setattr__，情况是类似的。在这个方法内赋值任何属性，都会再次触发__setattr__并创建一个类似的循环：
     def __setattr__(self, name, value):
        self.other = value # LOOPS!
     要解决这个问题，把属性作为实例的__dict__命名空间字典中的一个键赋值。这样就避免了直接的属性赋值：
     def __setattr__(self, name, value):
        self.__dict__['other'] = value # Use atttr dict to avoid me
     尽管这种方法比较少用到，但__setattr__也可以把自己的属性赋值传递给一个更高的超类而避免循环，就像__getattribute__一样：
     def __setattr__(self, name, value):
        object.__setattr__(self, 'other', value) # Force higher to avoid me
     相反，我们不能使用__dict__技巧在__getattribute__中避免循环：
     def __getattribute__(self, name):
        x = self.__dict__['other'] # LOOPS!
     获取__dict__属性本身会再次触发__getattribute__，导致一个递归循环。很奇怪，但确实如此。
P977 __getattr__和 __getattribute__有何区别？
     __getattr__方法只针对未定义属性的获取运行，即那些没有在一个实例上显示的属性，以及没有从它的任何类继承的属性。相反，__getattribute__方法针对所有的属性获取运行，不管属性是否定义了。因此，__getattr__中的代码可以自由地获取其他属性，如果它们定义了的话；而__getattribute__针对所有这样的属性获取使用特定代码以避免循环（它必须把获取指向一个超类以跳过自身）。
P977 特性和描述符有何区别？
     特性充当一个特定角色，而描述符更为通用。特性定义了特定属性的获取、设置和删除功能。描述符也提供了一个类，带有完成这些操作的方法，但是，它们提供了额外的灵活性以支持更多任意行为。实际上，特性真的只是创建特定描述符的一种简单方法——即在属性访问上运行的一个描述符。编码上也有区别：特性通过一个内置函数创建，而描述符用一个类来编码；同样，描述符可以利用类的所有常用OOP功能，例如继承。此外，除了实例的状态信息，描述符有它们自己的本地状态，因此，它们可以避免在实例中的名称冲突。
P977 特性和装饰器有何关联？
     特性可以用装饰器语法编写。由于property内置函数接受一个单个的函数参数，它可以直接用作一个函数装饰器来定义一个获取访问特性。由于名称重新绑定装饰器的行为，所以被装饰的函数的名称分配给了一个特性，而特性的获取访问器设置为最初装饰的函数（name = property(name)）。特性的setter和deleter属性允许我们进一步用装饰器语法添加设置和删除访问器——它们把访问器设置为装饰的函数并且返回扩展的特性。
P977 __getattr__和__getattribute__以及特性和描述符之间主要的功能区别是什么？
     __getattr__和 __getattribute__方法更为通用：它们用来捕获任意多的属性。相反，每个特性或描述符只针对一个特定属性提供访问拦截——我们不能用一个单个的特性或描述符捕获每个属性获取。另一方面，特性和描述符都通过设计来处理属性获取和赋值：__getattr__和__getattribute__只处理获取；要拦截赋值，必须编写__setattr__。实现也是不同的：__getattr__和__getattribute__是操作符重载方法，而特性和描述符是手动赋给类属性的对象。
