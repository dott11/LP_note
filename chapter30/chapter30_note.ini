P741 python的OOP实现可以概括为三个概念，如下所示。
     继承：继承是基于python中的属性查找的（在X.name表达式中）。
     多态：在X.method中，method的意义取决于X的类型（类）。
     封装：方法和运算符实现行为，数据隐藏默认是一种惯例。
P749 面向对象程序员时常会谈到所谓的委托（delegation），通常就是指控制器对象内嵌其他对象，而把对象请求传给那些对象。控制器负责管理工作，例如，记录存取等。在python中，委托通常是以__getattr__钩子方法实现的，因为这个方法会拦截对不存在属性的读取，包括类（有时称为代理类）可以使用__getattr__把任意读取转发给被包装的对象。包装类有被包装类对象的接口，而且自己也可以增加其他运算。
P751 class语句内开头有两个下划线，但结尾没有两个下划线的变量名会自动扩张，从而包含了所在类的名称。例如，像Spam类内__X这样的变量名会自动变成_Spam__X。
P754 由于类方法可以从一个实例或一个类访问，它们实际上在python中有两种形式。
     无绑定类方法对象：无self
     通过对类进行点号运算从而获取类的函数属性，会传回无绑定方法对象。调用该对象时，必须明确提供实例对象作为第一个参数。
     绑定实例方法对象：self+函数对
     通过对实例进行全运算从而获取类的函数属性，会传回绑定方法对象。python在绑定方法对象中自动地把实例和函数打包，所以，不用传递实例去调用该方法。
P760 在class语句中，首行括号内可以列出一个以上的超类。当这么做时，就是在使用所谓的多重继承：类和其实例继承了列出的所有超类的变量名。
P771 可以把类传给会产生任意类型对象的函数，这类函数在OOP设计领域中偶尔称为工厂。
     def factory(aClass,*args,**kwargs):
        return aClass(*args,**kwargs)
P774 什么是多重继承？
     当类从一个以上超类继承时，就发生了多重继承。把多个类代码的包混合在一起是十分有用的。
P774 什么是委托？
     委托设计把对象包装在代理类中，这样代理类会增加额外的行为，而把其他运算传给包装的对象。代理类包含了被包装的对象的接口。
P774 什么是组合？
     组合是一种技术，让控制器类嵌入和引导一群对象，并自行提供接口。这是利用类创建较大结构的方式。
P774 什么是绑定方法？
     绑定方法结合实例和方法函数；调用时，不用刻意传入实例对象，因为原始的实例依然可用。
P774 为什么使用伪私有属性？
     伪私有属性__X用来把名称本地化到包含类中。这包括像定义在类中的方法这样的类属性，以及在类中赋值的self实例属性。这样的名称扩展来包含类名称，类名称使得它们独特。 
