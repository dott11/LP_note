P686 class语句是python主要的OOP工具，但与C++不同的是，python的class并不是声明式的。就像def一样，class语句是对象的创建者并且是一个隐含的赋值运算——执行时，它会产生类对象，并将其引用值存储在前面所使用的变量名。此外，像def一样，class语句也是真正的可执行代码。知道python抵达并运行定义的class语句前，你的类都不存在。
P689 类中的方法位于class语句的主体内，是由def语句建立的函数对象。从抽象的视角来看，方法替实例对象提供了要继承的行为。从程序设计的角度来看，方法的工作方式与简单函数完全一致，只是有个重要差异：方法的第一个参数总是接收方法调用的隐性主题，也就是实例对象。
换句话说，python会自动把实例方法的调用对应到类方法函数。
instance.method(args...) >>>>>> class.method(instance,args...)
P691 调用超类构造函数：如果要保证子类的构造函数也会执行超类的逻辑，一般都必须通过类明确地调用超类的__init__方法。
     class Super:
        def __init__(self,x):
            ...default code...
     class Sub(Super):
        def __init__(self,x,y):
            Super.__init__(self,x)
            ...custom code...
P692 当对对象进行点号运算时，就会发生继承，而且涉及了搜索属性定义树（一或多个命名空间）。每次使用object.attr形式的表达式时，python会从头到尾搜索命名空间树，先从对象开始，寻找所能找到的第一个attr。
     命名空间树构造以及填入变量名的方式。通常来说：
     实例属性是由对方法内self属性进行赋值运算而生成的。
     类属性是通过class语句内的语句（赋值语句）而生成的。
     超类的连接是通过class语句首行的括号内列出类而生成的。
P694 类接口技术：
     Super：定义一个method函数以及在子类中期待一个动作的delegate。
     Inheritor：没有提供任何新的变量名，因此会获得Super中定义的一切内容。
     Replacer：用自己的版本覆盖Super的method。
     Extender：覆盖并回调默认method，从而定制Super的method。
     Provider：实现Superdelegate方法预期的action方法。

#coding=utf-8

class Super:
    def method(self):
        print("in Super.method")
    def delegate(self):
        self.action()

class Inheritor(Super):
    pass

class Replacer(Super):
    def method(self):
        print('in Replacer.method')

class Extender(Super):
    def method(self):
        print('starting Extender.method')
        Super.method(self)
        print('ending Extender.method')

class Provider(Super):
    def action(self):
        print('in Provider.action')

if __name__=='__main__':
    for klass in (Super,Inheritor,Replacer,Extender):
        print('\n'+klass.__name__+'...')
        klass().method()
    print('\nProvider...')
    x=Provider()
    x.delegate()


Super...
in Super.method

Inheritor...
in Super.method

Replacer...
in Replacer.method

Extender...
starting Extender.method
in Super.method
ending Extender.method

Provider...
in Provider.action

P695 这个例子中的超类有时也称作抽象超类——也就是类的部分行为默认是由其子类所提供的。
	 python3.0中，在一个class头部使用一个关键字参数，以及特殊的@装饰器语法。
	 带有一个抽象方法的类是不能通过调用创建一个实例，除非其所有的抽象方法都已经在子类中定义了。
P703 dir(object)类似于object.__dict__.keys()调用。不过，dir会排序其列表并引入一些系统属性。
P704 命名空间链接，实例和类的特殊属性__class__和__bases__，可以在程序代码内查看继承层次。
P707 类与模块的关系：
     模块：
     —— 是数据/逻辑包
     —— 通过编写python或C扩展来创建
     —— 通过导入来使用
     类：
     —— 实现新的对象
     —— 由class语句创建
     —— 通过调用来使用
     —— 总是位于一个模块中
     类也支持模块所不支持的额外功能，例如，运算符重载，多实例生成和继承。
