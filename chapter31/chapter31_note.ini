P775 除了实现新的种类的对象以外，类偶尔也用于扩展python的内置类型的功能，从而支持更另类的数据结构。可以使用委托技术，通过嵌入扩展类型。也可以使用继承把内置类型专有化，通过子类扩展类型。
P779 对于python3.0来说，所有的类都是所谓的新式类，不管它们是否显式地继承自object。所有的类都继承自object，不管是显式的还是隐式的，并且，所有的对象都是object的实例。
P781 新式类中，类型和类的区别已经完全消失了。类本身就是类型：type对象产生类作为自己的实例，并且类产生它们的类型的实例。
#coding=utf-8
class C:pass
I=C()
print(type(I))
print(I.__class__)
print(type(C))
print(C.__class__)
print(isinstance(I, object))
print(isinstance(C, object))
print(isinstance('abc', object))
print(isinstance(list, object))

<class '__main__.C'>
<class '__main__.C'>
<class 'type'>
<class 'type'>
True
True
True
True
P785 新式类中最显著的变化就是，对于所谓的多重继承树的钻石模式的继承（也就是有一个以上的超类会通往同一更高的超类）处理方式有点不同。
     简而言之，对于经典类而言，继承搜索程序是绝对深度优先，然后才是由左至右。python一路向上搜索，深入树的左侧，返回后，才开始找右侧。在新式类中，在这种情况下，搜索相对来说是宽度优先的。python先寻找第一个搜索的右侧的所有超类，然后才一路往上搜索至顶端共同的超类。换句话说，搜索过程先水平进行，再向上移动。
P789 将字符串属性名称顺序赋值给特殊的__slots__类属性，新式类就有可能限制类的实例将有的合法属性集，又能够优化内存和速度性能。这个特殊属性一般是在class语句顶层内将字符串名称顺序赋值给变量__slots__而设置：只有__slots__列表内的这些变量名可赋值为实例属性。
P793 有一种称为特性的机制，提供另一种方式让新式类定义自动调用的方法，来读取或赋值实例属性。特性和slots都是基于属性描述器的新概念。
P795 __getattribute__方法只适用于新式类，可以让类拦截所有属性的引用，而不局限于未定义的引用（如同__getattr__）。
P795 除了特性和运算符重载方法，python支持属性描述符的概念————带有__get__和__set__方法的类，分配给类属性并且由实例继承，这拦截了对特定属性的读取和写入访问。
P796 在python2.2中，有可能在类中定义两种方法，它们不用一个实例就可以调用：静态方法大致与一个类中的简单的无实例函数类似地工作，类方法传递一个类而不是一个实例。要使用这些方法，必须在类中调用特殊的内置函数，分别名为staticmethod和classmethod，或者使用装饰器语法来调用。在python3.0中，无实例的方法只通过一个类名调用，而不需要一个staticmethod声明。
     python通过静态方法的概念来支持这样的目标————嵌套一个类中的没有self参数的简单函数，并且旨在操作类属性而不是实例属性。静态方法不会接受一个自动的self参数，不管是通过一个类还是一个实例调用。它们通常记录跨所有实例的信息，而不是为实例提供行为。
     python还支持类方法的概念，这是类的一种方法。传递给它们的第一个参数是一个类对象而不是一个实例，不管是通过一个实例或一个类调用它们。即使是通过类调用，这样的方法也可以通过它们的self类参数来访问类数据。
#coding=utf-8

class A():
    count=0
    def __init__(self):
        A.count+=1
    @staticmethod
    def PrintCount():
        print(A.count)
          
if __name__=='__main__':
    a=A()
    print(a.count)
    b=A()
    print(a.count)
    print(A.count)
    a.PrintCount()
    A.PrintCount()

1
2
2
2
2
如果没有@staticmethod，a.PrintCount()
TypeError: PrintCount() takes 0 positional arguments but 1 was given
	 类方法也可以做类似的工作————如下代码与前面列出的静态方法版本具有相同的行为，但是，它使用一个类方法来把实例的类接收到其第一个参数中。类方法使用通用的自动传递类对象，而不是硬编码类名称。
#coding=utf-8

class A():
    count=0
    def __init__(self):
        A.count+=1
    @classmethod
    def PrintCount(cls):
        print(cls)
        print(cls.count)
          
if __name__=='__main__':
    a=A()
    print(a.count)
    b=A()
    print(a.count)
    print(A.count)
    a.PrintCount()
    A.PrintCount()

1
2
2
<class '__main__.A'>
2
<class '__main__.A'>
2
P805 函数装饰器提供了一种方式，替函数明确了特定的运算模式，也就是将函数包裹了另一层，在另一个函数的逻辑内实现。函数装饰器变成了通用工具：除了静态方法用法外，也可用于新增多种逻辑的函数。从某种程度上来说，函数装饰器类似于委托设计模式，但是其设计是为了增强特定的函数或方法调用，而不是整个对象接口。
P805 从语法上来讲，函数装饰器是它后边的函数的运行时的声明。函数装饰器是写成一行，就在定义函数或方法的def语句之前，而且由@符号，后面跟着所谓的元函数组成：也就是管理另一函数（或其他可调用对象）的函数。
#coding=utf-8

class tracer:
    def __init__(self,func):
        self.calls=0
        self.func=func
    def __call__(self,*args):
        self.calls+=1
        print('call %s to %s'%(self.calls,self.func.__name__))
        self.func(*args)
@tracer
def spam(a,b,c):
    print(a,b,c)

@tracer
def spam1(a,b,c):
    print(a,b,c)
            
if __name__=='__main__':
    spam(1, 2, 3)
    spam('a', 'b', 'c')
    spam1(1, 2, 3)
    spam1('a', 'b', 'c')

call 1 to spam
1 2 3
call 2 to spam
a b c
call 1 to spam1
1 2 3
call 2 to spam1
a b c
P807 类装饰器类似于函数装饰器，但是，它们在一条class语句的末尾运行，并且把一个类名重新绑定到一个可调用对象。同样，它们可以用来管理类（在类创建之后），或者当随后创建实例的时候插入一个包装逻辑层来管理实例。
P808 元类是一种类似的基于类的高级工具，其用途往往与类装饰器有所重合。它们提供了一种可选的模式，会把一个类对象的创建导向到顶级type类的一个子类，在一条class语句的最后：
class Meta(type):
	def __new__(meta,classname,supers,classdict):...
class C(metaclass=Meta):...
