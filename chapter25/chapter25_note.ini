P622 超类和子类，也叫基类和派生类。
P624 编写类树，以class和类调用来构造一些树和对象。
     1.每个class语句会生成一个新的类对象。
     2.每次类调用时，就会生成一个新的实例对象。
     3.实例自动连接至创建了这些实例的类。
     4.类连接至其超类的方法是，将超类列在类头部的括号内。其从左至右的顺序会决定树中的次序。
     class C2:...
     class C3:...
     class C1(C2,C3):...
     I1=C1()
     I2=C1()
     通过运行三个class语句创建了三个类对象，通过两次调用类C1，创建两个实例对象。这个例子使用了多重继承。也就是说，在类树中，类有一个以上的超类。如果class语句中的小括号内有一个以上的超类，它们由左至右的次序会决定超类搜索的顺序。
P629 python的OOP的重要的意义是什么？
     OOP就是代码的重用：分解代码，最小化代码的冗余以及对现存的代码进行定制来编写程序，而不是实地修改代码，或者从头开始。
P629 继承搜索在哪里查找属性？
     继承搜索会先在实例对象中寻找属性，然后才是创建实例的类，之后是所有较高的超类，由对象树低端到顶端，并且从左侧到右侧（默认）。当属性首次找到时，搜索就会停止。因为在此过程中变量名的最低的版本会获胜，类的属性自然而然地支持了通过扩展进行代码的定制。
P630 为什么类方法函数中的第一个参数特殊？
     类方法函数中的第一个参数之所以特殊，是因为它总是接受将方法调用视为隐含主体的实例对象。按惯例，通常称为self。因为方法函数默认总是有这个隐含的主体对象环境，所以我们说这是“面向对象”，也就是设计用来处理或修改对象的。
P630 __init__方法是做什么用的？
     如果类中编写或继承了__init__方法，每次类实例创建时，python会自动调用它。这也称为构造函数。除了明确传入类的名称的任何参数外，还会隐性的传入新实例。这也是最常见的运算符重载方法。如果没有__init__方法，实例刚创建时就是一个简单的空的命名空间。
