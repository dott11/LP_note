P472 函数设计概念：
     耦合性:对于输入使用参数并且对于输出使用return语句。
     耦合性：只有在真正必要的情况下使用全局变量。
     耦合性：不要改变可变类型的参数，除非调用者希望这么做。
     聚合性：每一个函数都应该有一个单一的、统一的目标。
     大小：每一个函数应该相对较小。
     耦合：避免直接改变在另一个模块文件中的变量。

P481 Python3.0中的函数注解：
     >>> def func(a:'spam',b:(1.10),c:float)->int:
         return a+b+c
     >>> func.__anotations__
     {'a':'spam','c':<class 'float'>,'b':(1,10),'return':<class 'int'>}

P483 lambda表达式：
     1.lambda是一个表达式，而不是一个语句。
     2.lambda的主体是一个单一的表达式，而不是一个代码块。

P489 map函数会对一个序列对象中的每一个元素应用被传入的函数，并且返回一个包含了所有函数调用结果的一个列表。
     def mymap(func,seq):
        res=[]
        for x in seq:res.append(func(x))
        return res

P490 基于某一测试函数过滤出一些元素：filter，对没对元素都应用函数并运行到最后结果：reduce。
     print(list(filter(lambda x:x>0,list(range(-5,5)))))
     [1,2,3,4]

P491 reduce在Python2.6中只是一个简单的内置函数，但是在Python3.0中则位于functools模块中。
     print(functools.reduce(lambda x,y:x+y,list(range(-5,5))))
     -5

P492 lambda表达式和def语句有什么关系：
     lambda和def都会创建函数对象，以便稍后调用。不过，因为lambda是表达式，可以嵌入函数定义中def语句上无法出现的地方。lambda的使用，总是可以用ef来替代，并且通过变量名来引用函数。从语法上来讲，lambda只允许单个的返回值表达式，因为它不支持语句代码块，因此，不适用于较大的函数。

P492 什么是递归注解：
     函数注解在Python3.0及其以后的版本中可用，并且是函数的参数及其结果的语法上的修饰，它会收集到分配给函数的__annotations__属性的一个字典中。Python在这些注解上没有放置语义含义，而是直接将其包装，以供其他工具潜在地使用。
