P837 try语句分句形式
     分句形式                       说明
     except:                        捕捉所有（其他）异常类型
     except name:                   只捕捉特定的异常
     except name,value:             捕捉所列的异常和其额外的数据（或实例）
     except (name1,name2):          捕捉任何列出的异常
     except (name1,name2),value:    捕捉任何列出的异常，并取得其额外数据
     else:                          如果没有引发异常，就运行
     finally:                       总是会运行此代码块
P844 try:
         main-action
     except Exception1:
         hanler1
     except Exception2:
         hanler2
     ...
     else:
         else-block
     finally:
         finally-block
     这个语句中的main-action代码块会先执行。如果该程序代码引发异常，那么所有except代码块都会逐一测试，寻找与抛出异常相符的语句。如果引发的异常是Exception1，则会执行handler1代码块；如果引导的异常是Exception2，则会执行handler2代码块；以此类推。如果没有引发异常，将会执行else-block。
     finally子句并没有终止异常：当finally-block执行时，如果异常还存在，就会在finally-block代码块执行后继续传递，而控制权会跳至程序其他地方（到另一个try，或者默认的顶层处理器）。如果finally执行时，没有异常处于激活状态，控制权就会在整个try语句之后继续下去。
     无论发生如下哪种情况，finally一定会执行。
     main-action中是否发生异常并处理过。
     main-action中是否发生异常并没有处理过。
     main-action中是否没有发生异常。
     任意的处理器中是否引发新的异常。
P847 要显式地触发异常，可以使用raise语句，raise关键字后面跟着可选的要引发的类或者类的一个实例。
     raise <instance>               #Raise instance of class
     raise <class>                  #Make and raise instance of class
     raise                          #Reraise the most recent exception
     python2.6和python3.0中异常总是类的实例。第一个raise形式是最常见的，我们直接提供一个实例，要么是在raise之前创建的，要么是raise语句中自带的。如果我们传递一个类，python调用不带构造函数参数的类，以创建被引发的一个实例；这个格式等同于在类引用后面添加圆括号。最后的形式重新引发最近引发的异常；它常用于异常处理器中，以传播已经捕获的异常。
P848 如果一个try包含了一个名为except name as X:子句，变量X将会分配给引发中所提供的实例。
P850 assert是raise常见使用模式的语法简写，asset可视为条件式的raise语句。
     assert <test>,<data>       #The <data> part is optional
     执行起来就像如下代码。
     if __debug__:
        if not <test>:
            raise AssertionError(<data>)
     如果test计算为假，python就会引发异常：data项是异常的额外数据。
P851 python2.6和python3.0引入了一种新的异常相关的语句：with及其可选的as子句。这个语句的设计是为了和环境管理器对象一起工作。
     文件对象有环境管理器，可在with代码块后自动关闭文件，无论是否发生引发异常。
     with open(r'C:\misc\data') as myfile:
        for line in myfile:
            print(line)
            ...more code here...
     使用更通用的而明确的try/finally语句来实现类似的效果。
     myfile=open(r'C:\misc\data')
     try:
         for line in myfile:
            print(line)
            ...more code here...
     finally:
         myfile.close()
