P826 在python中，异常通常可以用于各种用途。下面是它常见的几种角色。
     错误处理：每当在运行时检测到程序错误时，python就会引发异常。可以在程序中捕捉和响应错误，或者忽略已发生的异常。如果忽略错误，python默认的异常处理行为将停止：停止程序，打印出错信息。如果不想启动这种默认行为，就要写try语句来捕捉异常并从异常中恢复：当检测到错误时，python会跳到try处理器，而程序在try之后会重新执行。
     事件通知：异常也可用于发出有效状态的信号，而不需在程序间传递结果标志位，或者刻意对其进行测试。
     特殊情况处理：有时，发生了某种罕见的情况，很难调整代码去处理。通常会在异常处理器中处理这些罕见的情况，从而省去编写应对特殊情况的代码。
     终止行为：正如将要看到的一样，try/finally语句可确保一定会进行需要的结束运算，无论程序中是否有异常。
     非常规控制流程：最后，因为异常是一种高级的goto，它可以作为实现非常规的控制流程的基础。
P831 try/except的组合可用于捕捉异常并从中恢复，而try/finally的组合则很方便，可以确保无论try代码块内的代码是否发生了任何异常，终止行为一定会运行。
P833 如果你不想做任何特殊的事情来处理异常，那么异常会发生什么呢？
     任何未捕获的异常最终都流入默认的异常处理器，python在程序的最顶端提供了它。这个处理器打印出类似的出错消息，并且退出程序。
P833 如何从一个异常恢复你的脚本？
     如果你不想要默认消息和退出，可以编写try/except语句来捕获并从触发的异常恢复。一旦捕获了一个异常，该异常将终止，并且程序继续。
P833 指出两种方式：不管异常是否发生，它们用来指定最终运行的行为。
     try/finally语句可以用来确保在一个代码块退出后执行的操作，而不管它是否会引发一个异常。with/as语句也可以用来确保要运行的终止操作，但是，只有当处理的对象类型支持它的时候才可用。
